package model;

import java.util.Map;

/**
 * The Class Truck.
 * 
 * @author Gordon Tran
 * @version October 2018
 */
public class Truck extends AbstractVehicle implements Vehicle { 
    
    
    
    /**
     * Instantiates a new truck.
     *
     * @param theX the the X
     * @param theY the the Y
     * @param theDir the the dir
     */
    public Truck(final int theX, final int theY, final Direction theDir) {
        super(theX, theY, theDir);
    }

    /**
     * Passes through streets lights and cross walks but only when not red.
     * 
     * @param theTerrain Terrain type
     * @param theLight Light status
     */
    @Override
    public boolean canPass(final Terrain theTerrain, final Light theLight) {
        if (theTerrain.equals(Terrain.STREET) 
                        || theTerrain.equals(Terrain.LIGHT) 
                        || theTerrain.equals(Terrain.CROSSWALK)) {
            if (theTerrain.equals(Terrain.CROSSWALK) && theLight.equals(Light.RED)) {
                return false; //Can't cross red cross walks
            }
            return true; 
        }
        return false;
    }

    /**
     * Goes in any direction except reverse unless it has to.
     * 
     * @param theNeighbors Map of adjacent tiles
     * @return buffer Random direction
     */
    @Override
    public Direction chooseDirection(final Map<Direction, Terrain> theNeighbors) {
        //Random
        Direction buffer = Direction.random();
        while (buffer.equals(myDir.reverse())) {
            buffer = Direction.random();
        }
        
        //Reverse Section
        int temp = 0;
        for (Map.Entry<Direction, Terrain> entry : theNeighbors.entrySet()) {
            if (!entry.getKey().equals(myDir.reverse())) {
                if (entry.getValue() != Terrain.STREET
                                && entry.getValue() != Terrain.CROSSWALK
                                && entry.getValue() != Terrain.LIGHT) {
                    temp += 1;
                }
            }
        }
        if (temp == theNeighbors.size() - 1) {
            return myDir.reverse();
        }
        
        return buffer;
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#collide(model.Vehicle)
     */
    @Override
    public void collide(final Vehicle theOther) {
        //Nothing happens to the truck
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getDeathTime()
     */
    @Override
    public int getDeathTime() {
        //No death time
        return 0;
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getImageFileName()
     */
    @Override
    public String getImageFileName() {
        if (myLife) {
            return "truck.gif";
        }
        return "truck_dead.gif";
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getDirection()
     */
    @Override
    public Direction getDirection() {
        return super.getDirection();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getX()
     */
    @Override
    public int getX() {
        return super.getX();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getY()
     */
    @Override
    public int getY() {
        return super.getY();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#isAlive()
     */
    @Override
    public boolean isAlive() {
        //Always alive
        return true;
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#poke()
     */
    @Override
    public void poke() {
        super.poke();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#reset()
     */
    @Override
    public void reset() {
        super.reset();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#setDirection(model.Direction)
     */
    @Override
    public void setDirection(final Direction theDir) {
        super.setDirection(theDir);
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#setX(int)
     */
    @Override
    public void setX(final int theX) {
        super.setX(theX);
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#setY(int)
     */
    @Override
    public void setY(final int theY) {
        super.setY(theY);
    }

    @Override
    public String toString() {
        String buffer = super.toString();
        buffer = "Truck" + buffer;
        return buffer;
    }
}
