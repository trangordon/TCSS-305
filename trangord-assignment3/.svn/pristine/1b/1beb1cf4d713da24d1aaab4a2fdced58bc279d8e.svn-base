package model;

import java.util.Map;

// TODO: Auto-generated Javadoc
/**
 * The Class Taxi.
 * 
 * @author Gordon Tran
 * @version October 2018
 */
public class Taxi extends AbstractVehicle implements Vehicle {

    /** Dead for this many turns.*/
    private static final int DEATH_TIME = 10;
    
    /** Number of clock cycles taxi has to wait +1.*/
    private static final int CLOCK_WAIT = 4; //4 so taxi waits 3 cycles
    
    /** Instanced field to count timer of cross walk ignoring.*/
    private int myCrossTimer;
    
    /**
     * Instantiates a new taxi.
     *
     * @param theX the the X
     * @param theY the the Y
     * @param theDir the the dir
     */
    public Taxi(final int theX, final int theY, final Direction theDir) {
        super(theX, theY, theDir);
        myDeathTime = DEATH_TIME;
    }
    
    /**
     * Can pass through streets, 
     * traffic lights when green or yellow, and cross walks but waits a bit when red.
     * 
     * @param theTerrain Terrain type
     * @param theLight Light status
     */
    @Override
    public boolean canPass(final Terrain theTerrain, final Light theLight) {
        if (theTerrain.equals(Terrain.STREET) 
                        || theTerrain.equals(Terrain.LIGHT) 
                        || theTerrain.equals(Terrain.CROSSWALK)) {
            if (theTerrain.equals(Terrain.CROSSWALK) && theLight.equals(Light.RED)) {
                if (myCrossTimer == 0) {
                    myCrossTimer = CLOCK_WAIT;
                    return true; //Bypasses red light cross walks
                }
                return false; //Can't pass cross walks on red. For a bit 
            }
            if (theTerrain.equals(Terrain.LIGHT) && theLight.equals(Light.RED)) {
                return false; //Can't pass traffic lights when red
            }
            myCrossTimer = CLOCK_WAIT; //Reset timer when not on cross walk
            return true;
        }
        return false;
    }

    /**
     * Goes straight then left then right on streets, 
     * stops for lights sometimes and reverses as a last resort.
     *
     * @param theNeighbors Map of adjacent tiles
     */
    @Override
    public Direction chooseDirection(final Map<Direction, Terrain> theNeighbors) {
        //Stays on lights
        if (theNeighbors.get(myDir) == Terrain.LIGHT) {
            return myDir;
        }
        
        //Stays on cross walks for a bit
        if (theNeighbors.get(myDir) == Terrain.CROSSWALK) {
            myCrossTimer -= 1;
            return myDir;
        }
        
        //Straight then Left then Right
        if (theNeighbors.get(myDir) == Terrain.STREET) {
            return myDir;
        } else if (theNeighbors.get(myDir.left()) == Terrain.STREET) {
            return myDir.left();
        } else if (theNeighbors.get(myDir.right()) == Terrain.STREET) {
            return myDir.right();
        }
        
        //Checks for lights and cross walks before reversing
        for (Map.Entry<Direction, Terrain> entry : theNeighbors.entrySet()) {
            if (!entry.getKey().equals(myDir.reverse())) {
                if (entry.getValue() == Terrain.LIGHT 
                                || entry.getValue() == Terrain.CROSSWALK) {
                    return entry.getKey();
                }
            }
        }
        
        //Last Resort
        return myDir.reverse();

    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#collide(model.Vehicle)
     */
    @Override
    public void collide(final Vehicle theOther) {
        // TODO Auto-generated method stub
        super.collide(theOther);
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getDeathTime()
     */
    @Override
    public int getDeathTime() {
        // TODO Auto-generated method stub
        return super.getDeathTime();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getImageFileName()
     */
    @Override
    public String getImageFileName() {
        // TODO Auto-generated method stub
        if (myLife) {
            return "taxi.gif";
        }
        return "taxi_dead.gif";    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getDirection()
     */
    @Override
    public Direction getDirection() {
        // TODO Auto-generated method stub
        return super.getDirection();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getX()
     */
    @Override
    public int getX() {
        // TODO Auto-generated method stub
        return super.getX();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#getY()
     */
    @Override
    public int getY() {
        // TODO Auto-generated method stub
        return super.getY();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#isAlive()
     */
    @Override
    public boolean isAlive() {
        if (myDeathTime == DEATH_TIME) {
            myLife = true;
        }
        return super.isAlive();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#poke()
     */
    @Override
    public void poke() {
        // TODO Auto-generated method stub
        super.poke();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#reset()
     */
    @Override
    public void reset() {
        super.reset();
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#setDirection(model.Direction)
     */
    @Override
    public void setDirection(final Direction theDir) {
        // TODO Auto-generated method stub
        super.setDirection(theDir);
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#setX(int)
     */
    @Override
    public void setX(final int theX) {
        // TODO Auto-generated method stub
        super.setX(theX);
    }

    /* (non-Javadoc)
     * @see model.AbstractVehicle#setY(int)
     */
    @Override
    public void setY(final int theY) {
        // TODO Auto-generated method stub
        super.setY(theY);
    }

    @Override
    public String toString() {
        String buffer = super.toString();
        buffer = "Taxi" + buffer;
        return buffer;
    }
}
