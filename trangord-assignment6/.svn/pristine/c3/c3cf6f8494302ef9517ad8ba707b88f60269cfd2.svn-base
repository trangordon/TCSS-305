/*Gordon Tran
 * TCSS 305
 * Assignment 6
 */
package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

import model.Board;

/**
 * The Class GUI.
 * @author Gordon Tran
 * @version November 2018
 */
public class GUI implements PropertyChangeListener {
    
    /** The my frame. */
    private final JFrame myFrame = new JFrame("Tetris");
    
    /** The my board. */
    private final Board myBoard = new Board();
    
    /** The my panel. */
    private final JPanel myPanel = new JPanel(new GridLayout(4, 1));
    
    /**Controls.*/
    private final JPanel myControl = new JPanel(new GridLayout(0, 1));
    
    /**Score.*/
    private final JPanel mySScore = new JPanel(new GridLayout(0, 1));
    
    /**Game Panel.*/
    private final JPanel myGameS = new JPanel(new GridBagLayout());
    
    /**New game button.*/
    private final JButton myNewB = makeButton("New Game");
    
    /**End game button.*/
    private final JButton myEndB = makeButton("End Game");
    
    /**Score string.*/
    private final JLabel myScoreT = new JLabel();
    
    /**Level string.*/
    private final JLabel myLevelT = new JLabel();
    
    /** The pause label. */
    private final JLabel myPText = new JLabel();
    
    /** The timer. */
    private Timer myTimer;
    
    /**Menu Bar.*/
    private final JMenuBar myBar = new JMenuBar();
    
    /**Game option.*/
    private final JMenu myGame = new JMenu("Game");
    
    /**Start.*/
    private final JMenuItem myStart = new JMenuItem("New Game");
    
    /**End.*/
    private final JMenuItem myEnd = new JMenuItem("End Game");
    
    /**Size option.*/
    private final JMenu mySizeS = new JMenu("Size");
    
    /**Large button.*/
    private final JRadioButtonMenuItem myLargB = makeMButton("Large");
    
    /**Medium button.*/
    private final JRadioButtonMenuItem myMedB = makeMButton("Medium");
    
    /**Small button.*/
    private final JRadioButtonMenuItem mySmlB = makeMButton("Small");
    
    /**Pause indicator.*/
    private boolean myPause;
    
    /**In game.*/
    private boolean myInG;
    
    /**Tetris Panel.*/
    private final BoardPanel myBPanel = new BoardPanel();
    
    /**Next piece.*/
    private final NextPanel myNPiece = new NextPanel();
    
    /**Game speed.*/
    private int mySpeed = 1000;
    
    /**Game score.*/
    private int myScore;
    
    /**Level.*/
    private int myLevel;
    
    /**Large size.*/
    private Dimension myLarge = new Dimension(450, 659);
    
    /**Medium size.*/
    private Dimension myMed = new Dimension(364, 467);

    
    /**Small size.*/
    private Dimension mySmall = new Dimension(305, 350);
    
    
    /**
     * Constructor.
     */
    public GUI() {
        setup();
    }
    

    /**
     * Start.
     */
    private void setup() {
        myTimer = new Timer(mySpeed, new TimerAction());
        myBoard.addPropertyChangeListener(this);
        myFrame.addKeyListener(new MoveKeys());

        
        myFrame.add(myBPanel, BorderLayout.CENTER);
        myBPanel.setBackground(Color.WHITE);
        myBPanel.setBorder(makeBorder());
        
        myPText.setFont(myPText.getFont().deriveFont(64.0f));
        
        myFrame.setJMenuBar(myBar);
        myBar.add(myGame);
        myGame.add(myStart);
        myGame.add(myEnd);
        myBar.add(mySizeS);
        mySizeS.add(mySmlB);
        mySizeS.add(myMedB);
        mySizeS.add(myLargB);
        final ButtonGroup group = new ButtonGroup();
        group.add(mySmlB);
        group.add(myMedB);
        group.add(myLargB);
        mySmlB.addActionListener(new SizeSm());
        myMedB.addActionListener(new SizeMed());
        myLargB.addActionListener(new SizeLg());
        myLargB.setSelected(true);
        myStart.addActionListener(new NewGame());
        myEnd.addActionListener(new EndGame());
        myEnd.setEnabled(false);
        
        myFrame.add(myPanel, BorderLayout.EAST);
        myPanel.add(myNPiece);
        myNPiece.setBorder(makeBorder());
        myPanel.add(mySScore);
        mySScore.setBorder(makeBorder());
        myPanel.add(myGameS);
        myGameS.setBorder(makeBorder());
        myGameS.add(myNewB);
        myNewB.setBorder(makeBorder());
        myGameS.add(myEndB);
        myEndB.setBorder(makeBorder());
        myNewB.addActionListener(new NewGame());
        myEndB.addActionListener(new EndGame());
        myEndB.setVisible(false);
        myPanel.add(myControl);
        myControl.setBorder(makeBorder());
        myControl.add(new JLabel("Rotate: W/Up arrow"));
        myControl.add(new JLabel("Left: A/Left arrow"));
        myControl.add(new JLabel("Right: D/Right arrow"));
        myControl.add(new JLabel("Down: S/Down arrow"));
        myControl.add(new JLabel("Drop: Space"));
        myControl.add(new JLabel("Pause: P"));
        myControl.setBackground(Color.LIGHT_GRAY);
        mySScore.add(new JLabel("High Score: 935"));
        mySScore.add(myScoreT);
        myScoreT.setText("Score: " + myScore);
        mySScore.add(myLevelT);
        myLevelT.setText("Level: 1");
        
        mySScore.setBackground(Color.GRAY);
        myBPanel.add(myPText, BorderLayout.NORTH);
        
        
        myFrame.setSize(myLarge);
//        myFrame.setSize(new Dimension(464, 659));
//        myFrame.setMinimumSize(new Dimension(311, 350));
//        myFrame.addComponentListener(new ComponentAdapter() {
//            public void componentResized(final ComponentEvent componentEvent) {
//                System.out.println(myFrame.getSize());
//            }
//        });
        myFrame.setResizable(false);
        myFrame.setLocationRelativeTo(null);
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setVisible(true);
    }
    /**
     * Makes a button.
     * @param theName name of button
     * @return a button
     */
    private JButton makeButton(final String theName) {
        final JButton button = new JButton(theName);
        button.setForeground(Color.BLACK);
        button.setBackground(Color.WHITE);
        return button;
    }
    
    /**
     * Makes radio button.
     * @param theString name
     * @return a button
     */
    private JRadioButtonMenuItem makeMButton(final String theString) {
        final JRadioButtonMenuItem button = new JRadioButtonMenuItem(theString);
        return button;
    }
    
    /**
     * Makes border object.
     * @return black border
     */
    private Border makeBorder() {
        final Border line = new LineBorder(Color.BLACK);
        final Border margin = new EmptyBorder(5, 15, 5, 15);
        final Border compound = new CompoundBorder(line, margin);
        return compound;
    }
    
    
    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        if (theEvent.getPropertyName().equals("piece moved")) {
            final String buffer = (String) theEvent.getNewValue();
            myBPanel.setMyBoardS(buffer);
            myBPanel.repaint();
        }
        
        if (theEvent.getPropertyName().equals("game over")) {
            myTimer.stop();
            if (myInG) {
                JOptionPane.showMessageDialog(myFrame, "Game Over!", 
                                              myFrame.getTitle(), 
                                              JOptionPane.INFORMATION_MESSAGE);
                myInG = false;
                myEnd.setEnabled(false);
            }
            myStart.setEnabled((boolean) theEvent.getNewValue());
            myEndB.setVisible(false);
            myNewB.setVisible(true);
        }
        
        if (theEvent.getPropertyName().equals("lines cleared")) {
            myScore += 5;
            myScoreT.setText("Score: " + myScore);
            if (myScore % 25 == 0) {
                myLevel += 1;
                mySpeed = Math.floorDiv(mySpeed, myLevel);
                myLevelT.setText("Level: " + myLevel);
                if (mySpeed >= 50) {
                    myTimer.setDelay(mySpeed);
                } else {
                    myTimer.setDelay(50);
                }
                
            }
        }
        
        if (theEvent.getPropertyName().equals("preview")) {
            final String buffer = (String) theEvent.getNewValue();
            myNPiece.setMyNext(buffer);
            myNPiece.repaint();
        }
    }

    /**
     * Timer action class. 
     */
    class TimerAction implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.down();
        }
    }
    /**
     * Key listener class.
     */
    class MoveKeys implements KeyListener {
        
        @Override
        public void keyReleased(final KeyEvent theEvent) {
        }
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            final int key = theEvent.getKeyCode();
            if (myInG) {
                switch (key) {
                    case KeyEvent.VK_LEFT:
                        myBoard.left();
                        break;
                    case KeyEvent.VK_A:
                        myBoard.left();
                        break;
                    case KeyEvent.VK_RIGHT:
                        myBoard.right();
                        break;
                    case KeyEvent.VK_D:
                        myBoard.right();
                        break;
                    case KeyEvent.VK_DOWN:
                        myBoard.down();
                        break;
                    case KeyEvent.VK_S:
                        myBoard.down();
                        break;
                    case KeyEvent.VK_UP:
                        myBoard.rotate();
                        break;
                    case KeyEvent.VK_W:
                        myBoard.rotate();
                        break;
                    case KeyEvent.VK_SPACE:
                        myBoard.drop();
                        break;
                    case KeyEvent.VK_P:
                        if (myPause) {
                            myTimer.start();
                            myPause = false;
                            myPText.setText("");
                        } else if (!myPause && myInG) {
                            myTimer.stop();
                            myPause = true;
                            myPText.setText("Paused");
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        @Override
        public void keyTyped(final KeyEvent theEvent) {
        }
    }
    /**New game action.*/
    class NewGame implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theE) {
            myBoard.newGame();
            myTimer.start();
            myInG = true;
            myStart.setEnabled(false);
            myPause = false;
            myEnd.setEnabled(true);
            myScore = 0;
            myLevel = 1;
            mySpeed = 1000;
            myLevelT.setText("Level: " + myLevel);
            myEndB.setVisible(true);
            myNewB.setVisible(false);
            myFrame.requestFocus();
        }
    }
    /**End game action.*/
    class EndGame implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theE) {
            myTimer.stop();
            if (myInG) {
                JOptionPane.showMessageDialog(myFrame, "Game Over", 
                                              myFrame.getTitle(), JOptionPane.PLAIN_MESSAGE);
                myInG = false;
            }
            myStart.setEnabled(true);
            myEnd.setEnabled(false);
            myEndB.setVisible(false);
            myNewB.setVisible(true);
        }
    }
    
    class SizeSm implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent arg0) {
            myFrame.setSize(mySmall);
        }
        
    }
    class SizeMed implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent arg0) {
            myFrame.setSize(myMed);
        }
        
    }
    class SizeLg implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent arg0) {
            myFrame.setSize(myLarge);
        }
        
    }
}
